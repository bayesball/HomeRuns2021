fontface = 'bold') +
geom_text(data = filter(S2, b_strikes == 2),
mapping = aes(b_balls + b_strikes,
b_balls - b_strikes,
label = round(P, 2)),
nudge_y = -0.3, color = "blue",
fontface = 'bold', size = 5)
}
transition_graph(S2019)
transition_graph(filter(d, Season == 2000))
transition_graph(filter(d, Season == 2000), "2000")
transition_graph(filter(d, Season == 2020), "2020")
library(ShinyBayes)
HowardPrior()
library(ShinyBayes)
HowardPrior()
library(ShinyBayes)
HowardPrior()
library(ShinyBayes)
HowardPrior()
library(ShinyBayes)
TwoProportions()
Triplot()
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
runApp('inst/shiny-examples/HowardPrior')
HowardPrior()
library(CalledStrike)
BattingMeasure()
runApp('~/Dropbox/2021 WORK/Shiny_2021/brushing')
runApp('~/Dropbox/2021 WORK/Shiny_2021/thematic')
runApp('~/Dropbox/2021 WORK/Shiny_2021/thematic')
install.packages("thematic")
install.packages("thematic")
install.packages("thematic")
install.packages("thematic")
shiny::runApp('~/Dropbox/2021 WORK/Shiny_2021/thematic')
setwd("~/Dropbox/2021 WORK/Shiny_2021/brushing")
runApp()
?fluidPage
runApp()
runApp()
runApp()
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/CalledStrike/inst/shiny-examples/PitchValue')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/CalledStrike/inst/shiny-examples/PitchValue')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/CalledStrike/inst/shiny-examples/PitchValue')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/CalledStrike/inst/shiny-examples/PitchValue')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/CalledStrike/inst/shiny-examples/PitchValue')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/CalledStrike/inst/shiny-examples/PitchValue')
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("boot", "cachem", "cluster", "dotCall64", "gert", "kableExtra", "lifecycle", "MASS", "metR", "mgcv", "mime", "promises", "RcppArmadillo", "testthat", "usethis", "xfun"))
shiny::runApp('~/Dropbox/2021 WORK/Shiny_2021/ShinyBaseball Work/Pitch_Count_Type')
runApp('~/Dropbox/2021 WORK/Shiny_2021/ShinyBaseball Work/Pitch_Count_Type')
runApp('~/Dropbox/2021 WORK/Shiny_2021/ShinyBaseball Work/Pitch_Count_Type')
runApp('~/Dropbox/2021 WORK/Shiny_2021/ShinyBaseball Work/Pitch_Count_Type')
runApp('~/Dropbox/2021 WORK/Shiny_2021/ShinyBaseball Work/Pitch_Count_Type')
runApp('~/Dropbox/2021 WORK/Shiny_2021/ShinyBaseball Work/Pitch_Count_Type')
runApp('~/Dropbox/2021 WORK/Shiny_2021/ShinyBaseball Work/Pitch_Count_Type')
library(ShinyBaseball)
PitchCount()
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PitchCount2')
install.packages(c("cli", "pkgload", "quantreg", "RcppParallel", "renv", "svglite", "tibble"))
install.packages(c("RcppArmadillo", "rvest", "xfun", "zoo"))
library(LearnBayes)
head(stanfordheart)
head(stanfordheart,10)
install.packages(c("e1071", "RCurl", "sf", "survival", "units", "XML"))
install.packages(c("diffobj", "e1071", "renv", "sf"))
increasefont
library(CalledStrike)
increasefont
centertitle
library(ProbBayes)
bar_plot
install.packages("callr")
library(tmap)
geocode_OSM("India")
library(tmaptools)
geocode_OSM("India")
geocode_OSM("CBS Weg 1, Heerlen")
geocode_OSM("712 Sutton Place, Findlay, OH, USA")
data(NLD_muni)
osm_NLD <- read_osm(NLD_muni, ext=1.1)
install.packages("OpenStreetMap")
osm_NLD <- read_osm(NLD_muni, ext=1.1)
osm_NLD <- read_osm(NLD_muni, ext=1.1)
tm_shape(osm_NLD) +
tm_rgb() +
tm_shape(NLD_muni) +
tm_polygons("population", convert2density=TRUE, style="kmeans", alpha=.7, palette="Purples")
install.packages(c("cpp11", "gert", "packrat", "renv", "thematic", "tinytex", "vctrs"))
library(baseballr)
d <- scrape_statcast_savant("2021-04-01","2021-04-01")
d <- scrape_statcast_savant("2021-04-01", "2021-04-01")
names(d)
d <- scrape_statcast_savant("2021-03-15", "2021-04-01")
d <- scrape_statcast_savant("2021-03-15", "2021-03-15")
library(remotes)
remotes::install_github("BillPetti/baseballr")
library(ShinyBaseball)
BrushingZone()
FourMeasures()
PitchOutcome()
PitchTypeCount()
SprayChart()
SprayCompare()
BrushingZone()
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/BrushingZone')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/BrushingZone')
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/BrushingZone')
?radioButtons
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/BrushingZone')
install.packages(c("cli", "gh", "lwgeom", "processx", "remotes", "reprex"))
48090.98 / 7 * 12
4406.5 / 7 * 12
library(ShinyBaseball)
SprayChart()
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/SprayChart')
library(readr)
statcast2019 <- read_csv("~/Dropbox/2016 WORK/BLOG Baseball R/OTHER/StatcastData/statcast2019.csv")
View(statcast2019)
library(ShinyBaseball)
filter(chadwick, "Mike", "Trout")
get_id <- function(st){
names <- str_to_lower(unlist(str_split(str_squish(st), " ")))
if(length(names) == 3){
names <- c(paste(names[1], names[2]), names[3])
}
chadwick %>%
mutate(fname = str_to_lower(name_first),
lname = str_to_lower(name_last),
Name = paste(name_first,
name_last)) %>%
filter(fname == names[1],
lname == names[2]) %>%
select(key_mlbam, Name)
}
get_id("Mike Trout")
statcast2019 %>% filter(player == 545361, events == "home_run") -> mt
statcast2019 %>% filter(batter == 545361, events == "home_run") -> mt
dim(mt)
mt %>% mutate(
location_x = 2 *(hc_x - 125.42),
location_y = 2 * (198.27 - hc_y),
spray_angle = atan(location_x / location_y)
) -> mt
ggplot(mt, location_y, hit_distance_sc)
ggplot(mt, aes(location_y, hit_distance_sc)) + geom_point()
ggplot(filter(mt, abs(spray_angle) < 5), aes(location_y, hit_distance_sc)) + geom_point()
hist(mt$spray_angle)
ggplot(filter(mt, abs(spray_angle) < .1), aes(location_y, hit_distance_sc)) + geom_point()
ggplot(filter(mt, abs(spray_angle) < .1), aes(location_y, hit_distance_sc)) + geom_point()
ggplot(filter(mt, abs(spray_angle) < .1),                  aes(location_y * 1.3, hit_distance_sc)) + geom_point()
ggplot(filter(mt, abs(spray_angle) < .1),                  aes(location_y * 1.15, hit_distance_sc)) + geom_point()
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/SprayChart')
setwd("~/Dropbox/2020 WORK/Baseball Blog Work/sportyR")
library(sportyR)
# plot baseball field
(p1 <- geom_baseball(league = "MLB"))
# couple of utility functions
plot_point <- function(x, y){
geom_point(data = data.frame(x, y),
aes(x, y),
color = "red")
}
add_text <- function(x, y, label){
annotate(geom = "text",
x = x, y = y,
label = label,
color = "yellow")
}
# field with coordinates of some points
p1 + plot_point(0, 0) +
plot_point(-63, 63) +
plot_point(63, 63) +
plot_point(0, 126) +
add_text(18, 0, "(0, 0)") +
add_text(18, 126, "(0, 126)") +
add_text(81, 63, "(63, 63)") +
add_text(-81, 63, "(-63, 63)") +
ylim(-10, 200)
# read in statcast 2021 data
statcast2021 <- read_csv("~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/HomeRuns2021/statcast2021.csv")
# focus on groundballs hit by Freddie Freeman
ff <- filter(statcast2021,
batter == 518692,
type == "X",
launch_angle < 10)
# translate Statcast hit coordinate measurements
# the constant 2.4 seems to give reasonable values
ff %>%
mutate(location_x = 2.4 * (hc_x - 125.42),
location_y = 2.4 * (198.27 - hc_y),
Hit = ifelse(events %in% c("single",
"double", "triple", "home_run"),
"YES", "NO")) -> ff
# complete graph
p1 +
geom_point(data = ff,
aes(location_x, location_y,
color = Hit)) +
ggtitle("Freddie Freeman Ground Balls - 2021") +
theme(plot.title = element_text(colour = "blue", size = 18,
hjust = 0.5, vjust = 0.8, angle = 0)) +
scale_colour_manual(values =
c("yellow", "red"))
filter(statcast2021,
type == "X",
launch_angle < 10) %>%
sample_n(size = 5000) -> sc_grounders
filter(statcast2021,
launch_angle < 10) %>%
statcast2021 %>% filter(type == "X",
launch_angle < 10) %>%
sample_n(size = 5000) %>%
mutate(location_x = 2.4 * (hc_x - 125.42),
location_y = 2.4 * (198.27 - hc_y),
Hit = ifelse(events %in% c("single",
"double", "triple", "home_run"),
"YES", "NO")) -> sc_grounders
statcast2021 %>% filter(type == "X",
launch_angle < 10) %>%
sample_n(size = 5000) %>%
mutate(location_x = 2.4 * (hc_x - 125.42),
location_y = 2.4 * (198.27 - hc_y),
Hit = ifelse(events %in% c("single",
"double", "triple", "home_run"),
"YES", "NO")) -> sc_grounders
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = Hit))
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = Hit,
size = 0.2))
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = Hit),
size = 0.2)
statcast2021 %>% filter(type == "X",
launch_angle < 10) %>%
sample_n(size = 1000) %>%
mutate(location_x = 2.4 * (hc_x - 125.42),
location_y = 2.4 * (198.27 - hc_y),
Hit = ifelse(events %in% c("single",
"double", "triple", "home_run"),
"YES", "NO")) -> sc_grounders
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = Hit),
size = 0.2)
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = Hit),
size = 0.2) +
scale_colour_manual(values =
c("yellow", "red"))
names(sc_grounders)
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = estimated_ba_using_speedangle),
size = 0.2) +
scale_colour_manual(values =
c("yellow", "red"))
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = estimated_ba_using_speedangle),
size = 0.2)
statcast2021 %>% filter(type == "X",
launch_angle < 10) %>%
sample_n(size = 1000) %>%
mutate(location_x = 2.4 * (hc_x - 125.42),
location_y = 2.4 * (198.27 - hc_y),
Hit = ifelse(events %in% c("single",
"double", "triple", "home_run"),
"YES", "NO"),
xBA = estimated_ba_using_speedangle) -> sc_grounders
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = xBA),
size = 0.2)
library(CalledStrike)
contour_graph
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = xBA),
size = 0.2) +
scale_fill_distiller(palette="Spectral")
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = xBA),
size = 0.2) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = xBA),
size = 0.5) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = filter(sc_grounders,
launch_speed > 90),
aes(location_x, location_y,
color = xBA),
size = 0.5) +
scale_color_distiller(palette="Spectral")
statcast2021 %>% filter(type == "X",
launch_angle < 10) %>%
mutate(location_x = 2.4 * (hc_x - 125.42),
location_y = 2.4 * (198.27 - hc_y),
Hit = ifelse(events %in% c("single",
"double", "triple", "home_run"),
"YES", "NO"),
xBA = estimated_ba_using_speedangle) -> sc_grounders
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = Hit),
size = 0.2) +
scale_colour_manual(values =
c("yellow", "red"))
p1 +
geom_point(data = filter(sc_grounders,
launch_speed > 90),
aes(location_x, location_y,
color = xBA),
size = 0.5) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = filter(sc_grounders,
launch_speed > 90),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.2) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = filter(sc_grounders,
launch_speed > 90),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.5) +
scale_color_distiller(palette="Spectral")
names(sc_grounders)
table(statcast2019$if_fielding_alignment)
p1 +
geom_point(data = filter(sc_grounders,
launch_speed > 90,
if_fielding_alignment ==
"Infield shift"),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.5) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = filter(sc_grounders,
launch_speed > 90,
if_fielding_alignment ==
"Standard"),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.5) +
scale_color_distiller(palette="Spectral")
sum(sc_grounders$if_fielding_alignment=="Standard")
sum(sc_grounders$if_fielding_alignment=="Standard", na.rm = TRUE)
statcast2019 %>% filter(type == "X",
launch_angle < 10) %>%
mutate(location_x = 2.4 * (hc_x - 125.42),
location_y = 2.4 * (198.27 - hc_y),
Hit = ifelse(events %in% c("single",
"double", "triple", "home_run"),
"YES", "NO"),
xBA = estimated_ba_using_speedangle) -> sc_grounders
p1 +
geom_point(data = sc_grounders,
aes(location_x, location_y,
color = Hit),
size = 0.2) +
scale_colour_manual(values =
c("yellow", "red"))
p1 +
geom_point(data = filter(sc_grounders,
launch_speed > 90,
if_fielding_alignment ==
"Standard"),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.5) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = sample_n(filter(sc_grounders,
launch_speed > 90,
if_fielding_alignment ==
"Standard"), size = 5000),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.5) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = sample_n(filter(sc_grounders,
launch_speed > 90,
if_fielding_alignment ==
"Standard"), size = 5000),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.2) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = sample_n(filter(sc_grounders,
launch_speed < 90,
if_fielding_alignment ==
"Standard"), size = 5000),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.2) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = sample_n(filter(sc_grounders,
launch_speed < 90,
launch_speed > 80,
if_fielding_alignment ==
"Standard"), size = 5000),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.2) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = sample_n(filter(sc_grounders,
launch_speed < 90,
launch_speed > 80,
if_fielding_alignment ==
"Infield shift"), size = 5000),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.2) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = filter(sc_grounders,
launch_speed < 90,
launch_speed > 80,
if_fielding_alignment ==
"Infield shift"),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.2) +
scale_color_distiller(palette="Spectral")
p1 +
geom_point(data = filter(sc_grounders,
launch_speed < 90,
launch_speed > 80,
if_fielding_alignment ==
"Infield shift"),
aes(location_x, location_y,
color = xBA),
size = 0.5, alpha = 0.5) +
scale_color_distiller(palette="Spectral")
setwd("~/Dropbox/2020 WORK/statcast2020")
getwd()
setwd("~/Dropbox/2021 WORK/Statcast2021")
table(statcast2021$Game_Date)
library(lubridate)
source("scrape_sc_2021.R")
start <- ymd("2021-03-31")
today <- ymd(substr(Sys.time(), 1, 10))
day_number <- today - start - 1
last_day_collected <- 22
(collection_days <- day_number -
last_day_collected)
for(j in 1:collection_days){
scrape_sc_2021(last_day_collected + j,
last_day_collected + j)
}
statcast2021 <- read.csv("data/statcast2021.csv")
table(statcast2021$Game_Date)
sum(statcast2021$event == "home_run", na.rm = TRUE)
setwd("~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/HomeRuns2021")
write_csv(statcast2021,
"~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/HomeRuns2021")
write_csv(statcast2021,
"~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/HomeRuns2021/statcast2021.csv")
scip <- read_csv("SC_BB_mini.csv")
head(scip)
statcast2021 %>%
select(game_year, Game_Date,
launch_angle, launch_speed, events) ->
statcast2021
getwd()
write_csv(statcast2021, "statcast2021.csv")
